(()=>{"use strict";({383:function(){var e=this&&this.__awaiter||function(e,o,a,i){return new(a||(a=Promise))((function(r,t){function n(e){try{l(i.next(e))}catch(e){t(e)}}function s(e){try{l(i.throw(e))}catch(e){t(e)}}function l(e){var o;e.done?r(e.value):(o=e.value,o instanceof a?o:new a((function(e){e(o)}))).then(n,s)}l((i=i.apply(e,o||[])).next())}))};function o(e){try{const o=(e,a=0)=>{if(a>2)return"[objeto aninhado]";if(!e||"object"!=typeof e)return e;const i={};for(const r in e)if(Object.prototype.hasOwnProperty.call(e,r))try{"parent"===r?i[r]="[circular]":Array.isArray(e[r])?i[r]=`[Array(${e[r].length})]`:"object"==typeof e[r]&&null!==e[r]?i[r]=o(e[r],a+1):i[r]=e[r]}catch(e){i[r]="[erro ao acessar]"}return i},a=o(e);return JSON.stringify(a,null,2)}catch(e){return"[erro ao serializar]"}}function a(){return e(this,void 0,void 0,(function*(){const e=new Map;try{try{const o=yield figma.teamLibrary.getAvailableLibraryVariableCollectionsAsync();if(o&&Array.isArray(o))for(let a=0;a<o.length;a++)try{const i=o[a];if(i&&"string"==typeof i.libraryName){const o=i.libraryName;if(!e.has(o)){const r=i.key||`lib-var-${Date.now()}-${a}`;e.set(o,{id:r,name:o,library:"Biblioteca de Variáveis",type:"Variáveis"})}}}catch(e){console.warn("Erro ao processar coleção:",e)}}catch(e){console.warn("Erro ao buscar bibliotecas de variáveis:",e)}}catch(e){console.error("Erro ao obter bibliotecas:",e)}return e}))}function i(){return e(this,void 0,void 0,(function*(){try{console.log("Carregando coleções locais de variáveis...");const e=[],o=figma.variables.getLocalVariableCollections();o&&o.length>0&&(console.log(`Encontradas ${o.length} coleções locais de variáveis`),o.forEach(((o,a)=>{try{e.push({id:o.id,name:o.name,type:"Variáveis Locais"}),console.log(`Adicionada coleção local: ${o.name}`)}catch(e){console.warn(`Erro ao processar coleção local ${a}:`,e)}}))),figma.ui.postMessage({type:"local-collections-data",collections:e})}catch(e){console.error("Erro ao carregar coleções locais:",e),figma.ui.postMessage({type:"error",message:"Ocorreu um erro ao carregar coleções locais: "+String(e)})}}))}function r(o,a){return e(this,void 0,void 0,(function*(){try{for(const e of a)if(e.type){const a=o.boundVariables;a&&e.property&&a[e.property]&&(a[e.property]={type:"VARIABLE_ALIAS",id:e.id})}else if(e.property)switch(e.property){case"fill":"fills"in o&&(o.fillStyleId=e.id);break;case"stroke":"strokes"in o&&(o.strokeStyleId=e.id);break;case"effect":"effects"in o&&(o.effectStyleId=e.id);break;case"text":"textStyleId"in o&&(o.textStyleId=e.id);break;case"grid":"layoutGrids"in o&&(o.gridStyleId=e.id)}}catch(e){console.error("Erro ao substituir variáveis/estilos:",e)}}))}function t(o,a){return e(this,void 0,void 0,(function*(){try{let e;if("INSTANCE"===o.type)e=o.detachInstance();else{const a=o.parent;if(!a)return console.error("Nó não tem pai, não é possível clonar"),null;e=figma.createFrame(),e.x=o.x,e.y=o.y,e.resize(o.width,o.height),e.name=o.name,"opacity"in o&&(e.opacity=o.opacity),"visible"in o&&(e.visible=o.visible),"locked"in o&&(e.locked=o.locked),a.insertChild(a.children.indexOf(o)+1,e)}return yield r(e,a),e}catch(e){return console.error("Erro ao pré-visualizar substituição:",e),null}}))}function n(o){return e(this,void 0,void 0,(function*(){const e="selection"===o?figma.currentPage.selection:[figma.currentPage],a=[];function i(e){if("boundVariables"in e){const o=e.boundVariables;o&&Object.entries(o).forEach((([o,i])=>{if(i&&i.id){const r=figma.variables.getVariableById(i.id);r&&a.push({name:r.name,type:r.resolvedType.toString(),collection:r.variableCollectionId,nodeId:e.id,property:o})}}))}if("fillStyleId"in e&&e.fillStyleId){const o=figma.getStyleById(e.fillStyleId.toString());o&&a.push({name:o.name,type:"style",collection:"Fills",nodeId:e.id,property:"fill"})}if("strokeStyleId"in e&&e.strokeStyleId){const o=figma.getStyleById(e.strokeStyleId.toString());o&&a.push({name:o.name,type:"style",collection:"Strokes",nodeId:e.id,property:"stroke"})}if("effectStyleId"in e&&e.effectStyleId){const o=figma.getStyleById(e.effectStyleId.toString());o&&a.push({name:o.name,type:"style",collection:"Effects",nodeId:e.id,property:"effect"})}if("textStyleId"in e&&e.textStyleId){const o=figma.getStyleById(e.textStyleId.toString());o&&a.push({name:o.name,type:"style",collection:"Text Styles",nodeId:e.id,property:"text"})}if("gridStyleId"in e&&e.gridStyleId){const o=figma.getStyleById(e.gridStyleId.toString());o&&a.push({name:o.name,type:"style",collection:"Grid Styles",nodeId:e.id,property:"grid"})}"children"in e&&e.children.forEach((e=>i(e)))}return e.forEach((e=>i(e))),a}))}function s(){return e(this,void 0,void 0,(function*(){try{console.log("Carregando dados iniciais..."),yield function(){return e(this,void 0,void 0,(function*(){var e;try{console.log("Iniciando carregamento de bibliotecas...");const a=new Map;try{console.log("1. Buscando bibliotecas de variáveis...");const e=yield figma.teamLibrary.getAvailableLibraryVariableCollectionsAsync();if(e&&Array.isArray(e)){console.log(`Encontradas ${e.length} coleções de variáveis`),console.log("Estrutura:",o(e));for(let o=0;o<e.length;o++)try{const i=e[o];if(i&&"string"==typeof i.libraryName){const e=i.libraryName;if(!a.has(e)){const r=i.key||`lib-var-${Date.now()}-${o}`;a.set(e,{id:r,name:e,library:"Biblioteca de Variáveis",type:"Variáveis"}),console.log(`Adicionada biblioteca única: ${e} (Variáveis)`)}}}catch(e){console.warn("Erro ao processar coleção:",e)}}}catch(e){console.warn("Erro ao buscar bibliotecas de variáveis:",e)}try{if(console.log("1.5. Tentando novamente com getAvailableLibrariesAsync..."),"function"==typeof(null===(e=figma.teamLibrary)||void 0===e?void 0:e.getAvailableLibrariesAsync)){console.log("Função getAvailableLibrariesAsync disponível, tentando usar...");try{const e=yield figma.teamLibrary.getAvailableLibrariesAsync();if(e&&Array.isArray(e)){console.log(`Encontradas ${e.length} bibliotecas via getAvailableLibrariesAsync`),console.log("Estrutura:",o(e));for(let o=0;o<e.length;o++)try{const i=e[o];if("object"==typeof i&&null!==i){let e="";if("string"==typeof i.name?e=i.name.trim():i.library&&"string"==typeof i.library.name?e=i.library.name.trim():"string"!=typeof i.id&&"string"!=typeof i.key||(e=(i.id||i.key).trim()),e&&!a.has(e)){const r=i.id||i.key||`lib-comp-${Date.now()}-${o}`;a.set(e,{id:r,name:e,library:"Biblioteca de Componentes",type:"Componentes"}),console.log(`Adicionada biblioteca via getAvailableLibrariesAsync: ${e}`)}}}catch(e){console.warn(`Erro ao processar biblioteca ${o}:`,e)}}}catch(e){console.warn("Erro ao chamar getAvailableLibrariesAsync:",e)}}else if(console.log("Função getAvailableLibrariesAsync não está disponível na API"),"object"==typeof figma.libraries&&figma.libraries){console.log("Objeto figma.libraries disponível, tentando acessar...");try{console.log("Conteúdo de figma.libraries:",o(figma.libraries));const e=figma.libraries;if(Array.isArray(e))for(let o=0;o<e.length;o++){const i=e[o];if(i&&"string"==typeof i.name){const e=i.name.trim();if(e&&!a.has(e)){const r=i.id||`lib-direct-${Date.now()}-${o}`;a.set(e,{id:r,name:e,library:"Biblioteca",type:"Componentes"}),console.log(`Adicionada biblioteca diretamente: ${e}`)}}}else"object"==typeof e&&Object.keys(e).forEach((e=>{!a.has(e)&&e.length>0&&(a.set(e,{id:`lib-key-${Date.now()}-${e}`,name:e,library:"Biblioteca",type:"Componentes"}),console.log(`Adicionada biblioteca via chave: ${e}`))}))}catch(e){console.warn("Erro ao acessar figma.libraries:",e)}}}catch(e){console.warn("Erro ao tentar método alternativo para bibliotecas:",e)}try{console.log("2. Tentando métodos alternativos para detectar bibliotecas de componentes...");const e=figma.getLocalPaintStyles(),o=figma.getLocalTextStyles(),i=figma.getLocalEffectStyles(),r=figma.getLocalGridStyles();console.log(`Encontrados: ${e.length} estilos de cor, ${o.length} estilos de texto, ${i.length} estilos de efeito, ${r.length} estilos de grid`);const t=e=>{for(const o of e)try{if(!0===o.remote){let e="";if("string"==typeof o.name&&o.name.includes("/")&&(e=o.name.split("/")[0].trim()),!e&&"string"==typeof o.key&&o.key.includes(";")){const a=o.key.split(";");a.length>0&&(e=a[0].trim())}if(e&&!a.has(e)){const o=`lib-style-${Date.now()}-${e.replace(/\s+/g,"-")}`;a.set(e,{id:o,name:e,library:"Biblioteca de Estilos",type:"Estilos"}),console.log(`Adicionada biblioteca de estilos: ${e}`)}}}catch(e){console.warn("Erro ao processar estilo:",e)}};t(e),t(o),t(i),t(r)}catch(e){console.warn("Erro ao buscar estilos:",e)}try{console.log("3. Buscando bibliotecas nos componentes do documento...");for(const e of figma.root.children)try{console.log(`Buscando componentes na página: ${e.name}`);const o=e.findAllWithCriteria({types:["INSTANCE"]});if(o&&o.length>0){console.log(`Encontradas ${o.length} instâncias de componentes na página ${e.name}`);for(let e=0;e<o.length;e++)try{const i=o[e];if(i.mainComponent&&!0===i.mainComponent.remote){let e="";if("string"==typeof i.mainComponent.name&&i.mainComponent.name.includes("/")&&(e=i.mainComponent.name.split("/")[0].trim()),!e&&i.mainComponent.key){const o=i.mainComponent.key.split(";");o.length>0&&(e=o[0].trim())}if(!e)continue;if(!a.has(e)&&e.length>0){const o=`lib-comp-${Date.now()}-${e.replace(/\s+/g,"-")}`;a.set(e,{id:o,name:e,library:"Biblioteca de Componentes",type:"Componentes"}),console.log(`Adicionada biblioteca de componente: ${e}`)}}}catch(o){console.warn(`Erro ao processar instância ${e}:`,o)}}}catch(o){console.warn(`Erro ao processar página ${e.name}:`,o)}}catch(e){console.warn("Erro ao buscar componentes no documento:",e)}try{if(0===a.size){console.log("4. Tentando listar todas as bibliotecas via importable libraries...");const e=figma.importableLibraryItems;if(e&&(console.log("Bibliotecas importáveis:",o(e)),"object"==typeof e&&null!==e)){const o=Object.keys(e);for(const e of o)try{!a.has(e)&&e.length>0&&(a.set(e,{id:`lib-import-${Date.now()}-${e.replace(/\s+/g,"-")}`,name:e,library:"Biblioteca Importável",type:"Mista"}),console.log(`Adicionada biblioteca importável: ${e}`))}catch(o){console.warn(`Erro ao processar biblioteca importável ${e}:`,o)}}}}catch(e){console.warn("Erro ao listar bibliotecas importáveis:",e)}const i=Array.from(a.values());if(0===i.length)return console.log("Nenhuma biblioteca encontrada"),void figma.ui.postMessage({type:"libraries-data",message:"Não foi possível encontrar bibliotecas conectadas a este documento. Tente usar bibliotecas para que elas apareçam aqui.",libraries:[]});console.log(`Encontradas ${i.length} bibliotecas únicas no total`),figma.ui.postMessage({type:"libraries-data",message:`Encontradas ${i.length} bibliotecas`,libraries:i})}catch(e){const o=e instanceof Error?e.message:String(e);console.error("Erro no processamento principal:",o),figma.ui.postMessage({type:"error",message:"Ocorreu um erro ao tentar listar as bibliotecas: "+o})}}))}(),yield i()}catch(e){console.error("Erro ao carregar dados iniciais:",e),figma.ui.postMessage({type:"error",error:"Erro ao carregar dados iniciais."})}}))}console.log("Plugin iniciado"),figma.currentPage||(figma.notify("Erro: Não foi possível acessar a página atual"),figma.closePlugin()),figma.showUI(__html__,{width:450,height:600}),console.log("UI exibida"),figma.ui.onmessage=o=>e(void 0,void 0,void 0,(function*(){if(console.log("Mensagem recebida:",o),"search-variables"===o.type)console.log("Procurando variáveis e estilos..."),yield function(){return e(this,void 0,void 0,(function*(){try{console.log("Buscando variáveis e estilos...");const e=figma.currentPage.selection;if(!e||0===e.length)return console.log("Nenhum elemento selecionado"),void figma.ui.postMessage({type:"no-variables-found"});const o=yield n("selection");console.log(`Encontradas ${o.length} variáveis e estilos`),o.length>0?figma.ui.postMessage({type:"variables-found",variables:o}):figma.ui.postMessage({type:"no-variables-found"})}catch(e){console.error("Erro ao buscar variáveis:",e),figma.ui.postMessage({type:"error",error:"Erro ao buscar variáveis e estilos."})}}))}();else if("ui-ready"===o.type)console.log("UI pronta, carregando dados iniciais..."),yield s();else if("recarregar"===o.type)console.log("Recarregando dados..."),yield s();else if("carregarColecoes"===o.type)console.log(`Carregando coleções da biblioteca: ${o.libraryId}`),yield function(o){return e(this,void 0,void 0,(function*(){try{console.log(`Carregando coleções da biblioteca: ${o}`),yield function(o){return e(this,void 0,void 0,(function*(){var e;try{console.log(`Carregando coleções da biblioteca com ID: ${o}`);const i=[],r=yield a(),t=Array.from(r.values()).find((e=>e.id===o));if(!t)return console.warn(`Biblioteca com ID ${o} não encontrada`),void figma.ui.postMessage({type:"collections-data",collections:[]});const n=t.name;console.log(`Nome da biblioteca selecionada: ${n}`);try{const e=yield figma.teamLibrary.getAvailableLibraryVariableCollectionsAsync();if(e&&Array.isArray(e)){console.log(`Procurando em ${e.length} coleções de variáveis`);for(let a=0;a<e.length;a++)try{const r=e[a];let t=!1;(r.libraryName===n||r.key===o||r.id===o||r.libraryId===o)&&(t=!0),t&&(i.push({id:r.key||r.id||`collection-${Date.now()}-${a}`,name:r.name||`Coleção ${a+1}`,type:"Variáveis"}),console.log(`Adicionada coleção de variáveis: ${r.name}`))}catch(e){console.warn(`Erro ao processar coleção ${a}:`,e)}}}catch(e){console.warn("Erro ao buscar coleções de variáveis:",e)}try{let a=[];for(const e of figma.root.children){const o=e.findAllWithCriteria({types:["COMPONENT_SET"]});o&&o.length>0&&(a=[...a,...o])}try{if("function"==typeof(null===(e=figma.teamLibrary)||void 0===e?void 0:e.getComponentSetsAsync)){const e=yield figma.teamLibrary.getComponentSetsAsync();e&&Array.isArray(e)&&(a=[...a,...e])}}catch(e){console.warn("Erro ao buscar via API:",e)}console.log(`Procurando em ${a.length} conjuntos de componentes`);for(let e=0;e<a.length;e++)try{const r=a[e];let t=r.name||"",s=!1;if(!0===r.remote&&"string"==typeof t&&t.includes("/")&&t.split("/")[0].trim()===n&&(s=!0),r.libraryName===n)s=!0;else if(r.libraryId===o)s=!0;else if(r.key&&"string"==typeof r.key){const e=r.key.split(";");e.length>0&&e[0].trim()===n&&(s=!0)}if(s){let o=t;o.includes("/")&&(o=o.split("/").slice(1).join("/")),i.push({id:r.key||r.id||`set-${Date.now()}-${e}`,name:o||`Conjunto ${e+1}`,type:"Componentes"}),console.log(`Adicionado conjunto de componentes: ${o}`)}}catch(o){console.warn(`Erro ao processar conjunto ${e}:`,o)}}catch(e){console.warn("Erro ao buscar conjuntos de componentes:",e)}try{const e=[...figma.getLocalPaintStyles(),...figma.getLocalTextStyles(),...figma.getLocalEffectStyles(),...figma.getLocalGridStyles()];console.log(`Analisando ${e.length} estilos para encontrar coleções`);const o=new Map;for(const a of e)try{if(!0===a.remote&&"string"==typeof a.name&&a.name.includes("/")){const e=a.name.split("/");if(e[0].trim()===n&&e.length>1){const i=e[1].trim(),r=o.get(i);if(r)r.count++;else{let e="Estilo";"PAINT"===a.type?e="Cores":"TEXT"===a.type?e="Textos":"EFFECT"===a.type?e="Efeitos":"GRID"===a.type&&(e="Grids"),o.set(i,{count:1,type:e})}}}}catch(e){console.warn("Erro ao processar estilo:",e)}o.forEach(((e,o)=>{i.push({id:`style-collection-${Date.now()}-${o.replace(/\W+/g,"-")}`,name:o,type:`${e.type} (${e.count})`}),console.log(`Adicionada coleção de estilos: ${o} com ${e.count} estilos`)}))}catch(e){console.warn("Erro ao buscar coleções de estilos:",e)}0===i.length?(console.log("Nenhuma coleção encontrada na biblioteca"),figma.ui.postMessage({type:"collections-data",collections:[]})):(console.log(`Encontradas ${i.length} coleções na biblioteca`),figma.ui.postMessage({type:"collections-data",collections:i}))}catch(e){const o=e instanceof Error?e.message:String(e);console.error("Erro ao carregar coleções:",o),figma.ui.postMessage({type:"error",message:"Ocorreu um erro ao tentar listar as coleções: "+o})}}))}(o)}catch(e){console.error("Erro ao carregar coleções:",e),figma.ui.postMessage({type:"error",error:"Erro ao carregar coleções da biblioteca."})}}))}(o.libraryId);else if("carregarColecoesLocais"===o.type)console.log("Carregando coleções locais..."),yield i();else if("preVisualizarSubstituicao"===o.type){if(o.libraryId&&o.localCollectionId)console.log("Pré-visualizando correspondências entre biblioteca e coleção local..."),yield function(o,i){return e(this,void 0,void 0,(function*(){try{console.log(`Gerando prévia de correspondências - Biblioteca: ${o}, Coleção Local: ${i}`);const t=yield a(),n=Array.from(t.values()).find((e=>e.id===o));if(!n)throw new Error(`Biblioteca com ID ${o} não encontrada`);const s=figma.variables.getVariableCollectionById(i);if(!s)throw new Error(`Coleção local com ID ${i} não encontrada`);console.log(`Biblioteca: ${n.name}, Coleção Local: ${s.name}`);const l=yield figma.teamLibrary.getAvailableLibraryVariableCollectionsAsync();if(!l||!Array.isArray(l))throw new Error("Não foi possível obter as coleções de variáveis da biblioteca");const c=l.filter((e=>e.libraryName===n.name));if(!c.length)throw new Error(`Não foram encontradas coleções de variáveis na biblioteca ${n.name}`);console.log(`Encontradas ${c.length} coleções na biblioteca`);const d=[];for(const e of c)try{const o=yield figma.teamLibrary.getVariablesInLibraryCollectionAsync(e.key);o&&Array.isArray(o)&&d.push(...o)}catch(o){console.warn(`Erro ao obter variáveis da coleção ${e.name}:`,o)}console.log(`Obtidas ${d.length} variáveis da biblioteca para referência`);const y=s.variableIds.map((e=>figma.variables.getVariableById(e))).filter((e=>null!==e));console.log(`Encontradas ${y.length} variáveis na coleção local`);const m=[],g={};for(const o of y){if(!o)continue;let a=!1;for(const i of s.modes){if(a)break;i.name;const t=o.valuesByMode[i.modeId];if(t)if("object"==typeof t&&null!==t&&"type"in t&&"VARIABLE_ALIAS"===t.type&&"id"in t){const e=t.id,i=figma.variables.getVariableById(e);if(i){const e=d.filter((e=>e.name===i.name));if(e.length>0){const i=e[0];g[o.id]={localId:o.id,localName:o.name,libraryId:i.key,libraryName:i.name,valueType:"Referência a Variável"},a=!0}}}else if("object"==typeof t&&null!==t&&"type"in t&&"STRING"===t.type&&"value"in t){const e=t.value,i=d.filter((o=>o.name===e));if(i.length>0){const e=i[0];g[o.id]={localId:o.id,localName:o.name,libraryId:e.key,libraryName:e.name,valueType:"Nome de Variável"},a=!0}}else for(const i of d)if(i&&i.valuesByMode){for(const n in i.valuesByMode){const s=i.valuesByMode[n];if(s&&(r=s,!(e=t)&&!r||e&&r&&("object"==typeof e&&"object"==typeof r&&"COLOR"===e.type&&"COLOR"===r.type?e.r===r.r&&e.g===r.g&&e.b===r.b&&(e.a===r.a||void 0===e.a&&void 0===r.a):("object"==typeof e&&"object"==typeof r&&"FLOAT"===e.type&&"FLOAT"===r.type||"object"==typeof e&&"object"==typeof r&&"STRING"===e.type&&"STRING"===r.type||"object"==typeof e&&"object"==typeof r&&"BOOLEAN"===e.type&&"BOOLEAN"===r.type)&&e.value===r.value))){g[o.id]={localId:o.id,localName:o.name,libraryId:i.key,libraryName:i.name,valueType:o.resolvedType||"Valor Correspondente"},a=!0;break}}if(a)break}}}for(const e in g)try{const o=figma.variables.getVariableById(e);if(!o){console.warn(`Variável local com ID ${e} não encontrada`);continue}const a=g[e].libraryName;if(!d.find((e=>e.name===a))){console.warn(`Variável da biblioteca com nome "${a}" não encontrada`);continue}const i=Object.assign(Object.assign({},g[e]),{modes:[]});for(const e of s.modes){if(!o.valuesByMode.hasOwnProperty(e.modeId)){console.log(`Modo ${e.name} não tem valor definido, pulando...`);continue}const a=o.valuesByMode[e.modeId];if(!a)continue;let r="";if("object"==typeof a&&null!==a)if("type"in a)switch(a.type){case"COLOR":const e=a;r=`rgba(${Math.round(255*e.r)}, ${Math.round(255*e.g)}, ${Math.round(255*e.b)}, ${e.a||1})`;break;case"FLOAT":r=`${a.value}`;break;case"STRING":r=`"${a.value}"`;break;case"BOOLEAN":r=a.value?"true":"false";break;case"VARIABLE_ALIAS":const o=figma.variables.getVariableById(a.id);r=o?`→ ${o.name}`:`→ ID:${a.id}`;break;default:r="Tipo desconhecido"}else r=JSON.stringify(a);else r=String(a);i.modes.push({modeId:e.modeId,name:e.name,value:r})}m.push(i)}catch(o){console.warn(`Erro ao processar variável com ID ${e}: ${o}`)}console.log(`Encontradas ${m.length} correspondências entre variáveis locais e da biblioteca`),m.length>0?figma.ui.postMessage({type:"preview-correspondencias",hasMatches:!0,matches:m,totalMatches:m.length}):figma.ui.postMessage({type:"preview-correspondencias",hasMatches:!1,message:"Não foram encontradas correspondências entre as variáveis."})}catch(e){console.error("Erro ao gerar prévia:",e),figma.ui.postMessage({type:"preview-correspondencias",hasMatches:!1,error:String(e)})}var e,r}))}(o.libraryId,o.localCollectionId);else if(o.variables){console.log("Pré-visualizando substituição de variáveis e estilos...");const e=figma.currentPage.selection;if(e.length>0)for(const a of e)yield t(a,o.variables)}}else if("substituirVariaveis"===o.type){console.log("Substituindo variáveis e estilos em nós...");let e=[];if(e="selection"===(o.scope||"selection")?[...figma.currentPage.selection]:figma.currentPage.children,e.length>0&&o.variables&&Array.isArray(o.variables)){for(const a of e)yield r(a,o.variables);figma.notify("Variáveis e estilos substituídos com sucesso!")}else figma.notify("Nenhum nó selecionado ou nenhuma variável para substituir.")}else"substituirVariaveisEmColecao"===o.type?(console.log("Substituindo variáveis na coleção local..."),o.matches&&Array.isArray(o.matches)?yield function(o){return e(this,void 0,void 0,(function*(){try{console.log(`Iniciando substituição de ${o.length} variáveis na coleção local`);let a=0,i=0;function r(e){if(!e)return"undefined";if("object"==typeof e){if("COLOR"===e.type)return`RGB(${Math.round(255*e.r)},${Math.round(255*e.g)},${Math.round(255*e.b)})`;if("FLOAT"===e.type)return`${e.value}`;if("STRING"===e.type)return`"${e.value}"`;if("VARIABLE_ALIAS"===e.type){const o=figma.variables.getVariableById(e.id);return`Alias -> ${o?o.name:e.id}`}return JSON.stringify(e)}return String(e)}const t=yield figma.teamLibrary.getAvailableLibraryVariableCollectionsAsync();if(!t||!Array.isArray(t))throw new Error("Não foi possível obter as coleções de variáveis das bibliotecas");console.log(`Encontradas ${t.length} coleções de variáveis em todas as bibliotecas`),console.log("Carregando todas as variáveis das bibliotecas...");const n=[];for(const l of t)try{console.log(`Carregando variáveis da coleção ${l.name} da biblioteca ${l.libraryName}...`);const c=yield figma.teamLibrary.getVariablesInLibraryCollectionAsync(l.key);c&&Array.isArray(c)&&(console.log(`Adicionando ${c.length} variáveis da coleção ${l.name}`),n.push(...c))}catch(d){console.warn(`Erro ao obter variáveis da coleção ${l.name}:`,d)}function s(a){return e(this,void 0,void 0,(function*(){if(!a)return null;if("object"==typeof a&&null!==a&&"VARIABLE_ALIAS"===a.type&&a.id){const e=figma.variables.getVariableById(a.id);if(e){console.log(`Variável é referência para ${e.name}`);const a=o.find((o=>o.localName===e.name));if(a){console.log(`Encontrado match para a variável referenciada: ${a.libraryName}`);const e=n.find((e=>e.name===a.libraryName||e.name.endsWith(`/${a.libraryName}`)));if(e)return{variavelEncontrada:!0,variavelBiblioteca:e}}for(const o of n)if(o.name===e.name||o.name.endsWith(`/${e.name}`))return console.log(`Encontrada variável na biblioteca com nome ${o.name}`),{variavelEncontrada:!0,variavelBiblioteca:o}}}return{variavelEncontrada:!1,valorOriginal:a}}))}console.log(`Carregadas ${n.length} variáveis de todas as bibliotecas`);for(const y of o)try{const m=figma.variables.getVariableById(y.localId);if(!m){console.warn(`Variável local com ID ${y.localId} não encontrada`);continue}const g=figma.variables.getVariableCollectionById(m.variableCollectionId);if(!g){console.warn(`Coleção local para variável ${m.name} não encontrada`);continue}console.log(`Processando variável local: ${m.name}`);let f=!1;if(y.modes&&y.modes.length>0)for(const b of y.modes)try{const p=b.modeId,u=b.name;if(!g.modes.find((e=>e.modeId===p))){console.warn(`Modo ${u} não encontrado na coleção local`);continue}const v=m.valuesByMode[p];if(!v){console.log(`Modo ${u} não tem valor definido, pulando...`);continue}console.log(`Processando modo: ${u} (ID: ${p}) para variável ${m.name}`),console.log(`Valor atual: ${r(v)}`);const h=yield s(v);if(h.variavelEncontrada)try{console.log(`Importando variável ${h.variavelBiblioteca.name}...`);const $=yield figma.variables.importVariableByKeyAsync(h.variavelBiblioteca.key);if($){const A={type:"VARIABLE_ALIAS",id:$.id};console.log(`Modo ${u} está ${r(v)} e vai para Alias -> ${$.name}`);const I=v;try{m.setValueForMode(p,A),f=!0,console.log(`Modo ${u} atualizado com sucesso para ${$.name}`)}catch(E){console.warn(`Erro ao aplicar referência para modo ${u}: ${E}`);try{m.setValueForMode(p,I),console.log(`Restaurado valor original para o modo ${u}`)}catch(w){console.error(`Erro ao restaurar valor original para o modo ${u}: ${w}`)}i++}}else console.warn(`Não foi possível importar a variável ${h.variavelBiblioteca.name}`)}catch(S){console.warn(`Erro ao importar variável: ${S}`)}else{console.log("Não foi encontrada referência direta, tentando buscar por nome...");const L=n.filter((e=>e.name===y.libraryName||e.name.endsWith(`/${y.libraryName}`)));if(console.log(`Encontradas ${L.length} variáveis com o nome "${y.libraryName}" nas bibliotecas`),L.length>0)try{const C=L[0],N=yield figma.variables.importVariableByKeyAsync(C.key);if(N){const B={type:"VARIABLE_ALIAS",id:N.id};console.log(`Modo ${u} está ${r(v)} e vai para Alias -> ${N.name}`);const M=v;try{m.setValueForMode(p,B),f=!0,console.log(`Modo ${u} atualizado com sucesso para ${N.name}`)}catch(V){console.warn(`Erro ao aplicar referência para modo ${u}: ${V}`);try{m.setValueForMode(p,M),console.log(`Restaurado valor original para o modo ${u}`)}catch(k){console.error(`Erro ao restaurar valor original para o modo ${u}: ${k}`)}i++}}else console.warn(`Não foi possível importar a variável ${C.name}`)}catch(O){console.warn(`Erro ao importar variável: ${O}`)}else console.warn(`Não foi encontrada variável com nome "${y.libraryName}" nas bibliotecas`)}}catch(j){console.warn(`Erro ao processar modo ${b.name}: ${j}`),i++}else console.warn(`Variável ${m.name} não tem modos definidos nos matches`);f&&(a++,console.log(`Variável ${m.name} atualizada com sucesso em pelo menos um modo`))}catch(T){console.error(`Erro ao processar variável ${y.localName}: ${T}`),i++}console.log(`Substituição concluída: ${a} variáveis alteradas, ${i} erros`),a>0?figma.ui.postMessage({type:"update-collections-result",success:!0,message:`${a} variáveis atualizadas com sucesso. ${i} variáveis com erro.`}):figma.ui.postMessage({type:"update-collections-result",success:!1,message:`Não foi possível atualizar as variáveis. ${i} variáveis com erro.`})}catch(P){console.error("Erro ao substituir variáveis:",P),figma.ui.postMessage({type:"update-collections-result",success:!1,message:`Erro: ${String(P)}`})}}))}(o.matches):figma.notify("Nenhuma correspondência para substituir.")):"activeTabChanged"===o.type&&console.log("Aba ativa alterada:",o.tabId)}))}})[383]()})();